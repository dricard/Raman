//
//  RamanStyleKit.swift
//  Raman
//
//  Created by Denis Ricard on 2017-06-15.
//  Copyright © 2017 Hexaedre. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class RamanStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let backgroundColorSelected: UIColor = UIColor(red: 1.000, green: 0.990, blue: 0.940, alpha: 1.000)
        static var imageOfSpectro0: UIImage?
        static var spectro0Targets: [AnyObject]?
        static var imageOfSpectro1: UIImage?
        static var spectro1Targets: [AnyObject]?
        static var imageOfSpectro2: UIImage?
        static var spectro2Targets: [AnyObject]?
        static var imageOfSpectro3: UIImage?
        static var spectro3Targets: [AnyObject]?
        static var imageOfSpectro4: UIImage?
        static var spectro4Targets: [AnyObject]?
        static var imageOfBw0: UIImage?
        static var bw0Targets: [AnyObject]?
        static var imageOfBw2: UIImage?
        static var bw2Targets: [AnyObject]?
        static var imageOfBw1: UIImage?
        static var bw1Targets: [AnyObject]?
        static var imageOfBw3: UIImage?
        static var bw3Targets: [AnyObject]?
        static var imageOfSpectro: UIImage?
        static var spectroTargets: [AnyObject]?
        static var imageOfSpectroSelected: UIImage?
        static var spectroSelectedTargets: [AnyObject]?
        static var imageOfBandwidth: UIImage?
        static var bandwidthTargets: [AnyObject]?
        static var imageOfBandwidthSelected: UIImage?
        static var bandwidthSelectedTargets: [AnyObject]?
        static var imageOfAccesoryImage: UIImage?
        static var accesoryImageTargets: [AnyObject]?
    }

    //// Colors

    @objc dynamic public class var backgroundColorSelected: UIColor { return Cache.backgroundColorSelected }

    //// Drawing Methods

    @objc dynamic public class func drawSpectro0(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Color Declarations
        let main = UIColor(red: 0.440, green: 0.720, blue: 0.880, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 2, y: 2, width: 56, height: 56), cornerRadius: 6)
        RamanStyleKit.backgroundColorSelected.setFill()
        rectanglePath.fill()
        main.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()


        //// Text Drawing
        let textRect = CGRect(x: 5, y: 9, width: 50, height: 34)
        let textTextContent = "Laser"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.buttonFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 11, y: 43, width: 38, height: 9)
        let text2TextContent = "nm"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedStringKey: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSpectro1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Color Declarations
        let main = UIColor(red: 0.440, green: 0.720, blue: 0.880, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 2, y: 2, width: 56, height: 56), cornerRadius: 6)
        RamanStyleKit.backgroundColorSelected.setFill()
        rectanglePath.fill()
        main.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()


        //// Text Drawing
        let textRect = CGRect(x: 5, y: 9, width: 50, height: 34)
        let textTextContent = "Signal"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: 16),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 11, y: 43, width: 38, height: 9)
        let text2TextContent = "nm"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedStringKey: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSpectro2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Color Declarations
        let main = UIColor(red: 0.440, green: 0.720, blue: 0.880, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 2, y: 2, width: 56, height: 56), cornerRadius: 6)
        RamanStyleKit.backgroundColorSelected.setFill()
        rectanglePath.fill()
        main.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()


        //// Text Drawing
        let textRect = CGRect(x: 5, y: 9, width: 50, height: 34)
        let textTextContent = "Δω"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.buttonFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 11, y: 43, width: 38, height: 9)
        let text2TextContent = "cm  "
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedStringKey: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 36, y: 40, width: 10, height: 6)
        let text3TextContent = "-1"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .center
        let text3FontAttributes = [
            .font: UIFont.systemFont(ofSize: 8),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text3Style,
        ] as [NSAttributedStringKey: Any]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSpectro3(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Color Declarations
        let main = UIColor(red: 0.440, green: 0.720, blue: 0.880, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 2, y: 2, width: 56, height: 56), cornerRadius: 6)
        RamanStyleKit.backgroundColorSelected.setFill()
        rectanglePath.fill()
        main.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()


        //// Text Drawing
        let textRect = CGRect(x: 5, y: 9, width: 50, height: 34)
        let textTextContent = "Δω"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.buttonFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 11, y: 43, width: 38, height: 10)
        let text2TextContent = "GHz"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedStringKey: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSpectro4(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Color Declarations
        let main = UIColor(red: 0.440, green: 0.720, blue: 0.880, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 2, y: 2, width: 56, height: 56), cornerRadius: 6)
        RamanStyleKit.backgroundColorSelected.setFill()
        rectanglePath.fill()
        main.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()


        //// Text Drawing
        let textRect = CGRect(x: 5, y: 9, width: 50, height: 34)
        let textTextContent = "Δω"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: UIFont.buttonFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 11, y: 43, width: 38, height: 9)
        let text2TextContent = "meV"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedStringKey: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBw0(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Color Declarations
        let main = UIColor(red: 0.440, green: 0.720, blue: 0.880, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 2, y: 2, width: 56, height: 56), cornerRadius: 6)
        RamanStyleKit.backgroundColorSelected.setFill()
        rectanglePath.fill()
        main.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()


        //// Text Drawing
        let textRect = CGRect(x: 11, y: 11, width: 38, height: 38)
        let textTextContent = "λ"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Symbol", size: 32)!,
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 11, y: 43, width: 38, height: 9)
        let text2TextContent = "nm"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedStringKey: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBw2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Color Declarations
        let main = UIColor(red: 0.440, green: 0.720, blue: 0.880, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 2, y: 2, width: 56, height: 56), cornerRadius: 6)
        RamanStyleKit.backgroundColorSelected.setFill()
        rectanglePath.fill()
        main.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()


        //// Text Drawing
        let textRect = CGRect(x: 7, y: 8, width: 47, height: 35)
        let textTextContent = "BW"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: 26),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 11, y: 43, width: 38, height: 10)
        let text2TextContent = "GHz"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont.systemFont(ofSize: 11),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedStringKey: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBw1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Color Declarations
        let main = UIColor(red: 0.440, green: 0.720, blue: 0.880, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 2, y: 2, width: 56, height: 56), cornerRadius: 6)
        RamanStyleKit.backgroundColorSelected.setFill()
        rectanglePath.fill()
        main.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()


        //// Text Drawing
        let textRect = CGRect(x: 7, y: 8, width: 47, height: 35)
        let textTextContent = "BW"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: 26),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 13, y: 43, width: 34, height: 10)
        let text2TextContent = "cm  "
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedStringKey: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 37, y: 41, width: 10, height: 6)
        let text3TextContent = "-1"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .center
        let text3FontAttributes = [
            .font: UIFont.systemFont(ofSize: 8),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text3Style,
        ] as [NSAttributedStringKey: Any]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBw3(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Color Declarations
        let main = UIColor(red: 0.440, green: 0.720, blue: 0.880, alpha: 1.000)

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 2, y: 2, width: 56, height: 56), cornerRadius: 6)
        RamanStyleKit.backgroundColorSelected.setFill()
        rectanglePath.fill()
        main.setStroke()
        rectanglePath.lineWidth = 2
        rectanglePath.stroke()


        //// Text Drawing
        let textRect = CGRect(x: 7, y: 8, width: 47, height: 35)
        let textTextContent = "BW"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont.boldSystemFont(ofSize: 26),
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 11, y: 43, width: 38, height: 9)
        let text2TextContent = "nm"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont.systemFont(ofSize: UIFont.smallSystemFontSize),
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedStringKey: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSpectro(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 34, height: 34), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 34, height: 34), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 34, y: resizedFrame.height / 34)


        //// Color Declarations
        let signalColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let color2 = signalColor.shadow(withLevel: 0.6)

        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 34, height: 34), cornerRadius: 3)
        RamanStyleKit.backgroundColorSelected.setFill()
        rectangle2Path.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 2.5, y: 29.5))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 25.5), controlPoint1: CGPoint(x: 2.5, y: 29.5), controlPoint2: CGPoint(x: 7.5, y: 28.5))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 3.5), controlPoint1: CGPoint(x: 11.5, y: 22.5), controlPoint2: CGPoint(x: 12, y: 3.5))
        bezierPath.addCurve(to: CGPoint(x: 14.5, y: 25.5), controlPoint1: CGPoint(x: 12, y: 3.5), controlPoint2: CGPoint(x: 12.5, y: 22.5))
        bezierPath.addCurve(to: CGPoint(x: 19.5, y: 29.5), controlPoint1: CGPoint(x: 16.5, y: 28.5), controlPoint2: CGPoint(x: 17.5, y: 29.5))
        bezierPath.addCurve(to: CGPoint(x: 23.5, y: 25.5), controlPoint1: CGPoint(x: 21.5, y: 29.5), controlPoint2: CGPoint(x: 22.5, y: 28.5))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 10.5), controlPoint1: CGPoint(x: 24.5, y: 22.5), controlPoint2: CGPoint(x: 25, y: 10.5))
        bezierPath.addCurve(to: CGPoint(x: 26.5, y: 25.5), controlPoint1: CGPoint(x: 25, y: 10.5), controlPoint2: CGPoint(x: 25.5, y: 23.5))
        bezierPath.addCurve(to: CGPoint(x: 30.5, y: 29.5), controlPoint1: CGPoint(x: 27.5, y: 27.5), controlPoint2: CGPoint(x: 29.5, y: 29.5))
        bezierPath.addCurve(to: CGPoint(x: 2.5, y: 29.5), controlPoint1: CGPoint(x: 31.5, y: 29.5), controlPoint2: CGPoint(x: 2.5, y: 29.5))
        bezierPath.close()
        signalColor.setFill()
        bezierPath.fill()
        color2.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSpectroSelected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 34, height: 34), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 34, height: 34), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 34, y: resizedFrame.height / 34)


        //// Color Declarations
        let main = UIColor(red: 0.440, green: 0.720, blue: 0.880, alpha: 1.000)
        let signalColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let color2 = signalColor.shadow(withLevel: 0.6)

        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 0.5, y: 0.5, width: 33, height: 33), cornerRadius: 3)
        main.setFill()
        rectangle3Path.fill()
        color2.setStroke()
        rectangle3Path.lineWidth = 1
        rectangle3Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 2.5, y: 29.5))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 25.5), controlPoint1: CGPoint(x: 2.5, y: 29.5), controlPoint2: CGPoint(x: 7.5, y: 28.5))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 3.5), controlPoint1: CGPoint(x: 11.5, y: 22.5), controlPoint2: CGPoint(x: 12, y: 3.5))
        bezierPath.addCurve(to: CGPoint(x: 14.5, y: 25.5), controlPoint1: CGPoint(x: 12, y: 3.5), controlPoint2: CGPoint(x: 12.5, y: 22.5))
        bezierPath.addCurve(to: CGPoint(x: 19.5, y: 29.5), controlPoint1: CGPoint(x: 16.5, y: 28.5), controlPoint2: CGPoint(x: 17.5, y: 29.5))
        bezierPath.addCurve(to: CGPoint(x: 23.5, y: 25.5), controlPoint1: CGPoint(x: 21.5, y: 29.5), controlPoint2: CGPoint(x: 22.5, y: 28.5))
        bezierPath.addCurve(to: CGPoint(x: 25, y: 10.5), controlPoint1: CGPoint(x: 24.5, y: 22.5), controlPoint2: CGPoint(x: 25, y: 10.5))
        bezierPath.addCurve(to: CGPoint(x: 26.5, y: 25.5), controlPoint1: CGPoint(x: 25, y: 10.5), controlPoint2: CGPoint(x: 25.5, y: 23.5))
        bezierPath.addCurve(to: CGPoint(x: 30.5, y: 29.5), controlPoint1: CGPoint(x: 27.5, y: 27.5), controlPoint2: CGPoint(x: 29.5, y: 29.5))
        bezierPath.addCurve(to: CGPoint(x: 2.5, y: 29.5), controlPoint1: CGPoint(x: 31.5, y: 29.5), controlPoint2: CGPoint(x: 2.5, y: 29.5))
        bezierPath.close()
        signalColor.setFill()
        bezierPath.fill()
        color2.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: 0.5, y: 0.5, width: 33, height: 33), cornerRadius: 3)
        color2.setStroke()
        rectangle4Path.lineWidth = 1
        rectangle4Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBandwidth(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 34, height: 34), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 34, height: 34), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 34, y: resizedFrame.height / 34)


        //// Color Declarations
        let main = UIColor(red: 0.440, green: 0.720, blue: 0.880, alpha: 1.000)
        let signalColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let color2 = signalColor.shadow(withLevel: 0.6)

        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: 0.5, y: 0.5, width: 33, height: 33), cornerRadius: 3)
        RamanStyleKit.backgroundColorSelected.setFill()
        rectangle4Path.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 11, y: 7, width: 12, height: 20))
        color2.setFill()
        rectanglePath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0.5, y: 16.5))
        bezierPath.addLine(to: CGPoint(x: 10.5, y: 16.5))
        bezierPath.addLine(to: CGPoint(x: 6.5, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 6.5, y: 18.5))
        bezierPath.addLine(to: CGPoint(x: 10.5, y: 16.5))
        bezierPath.addLine(to: CGPoint(x: 10.5, y: 16.5))
        main.setFill()
        bezierPath.fill()
        main.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 33.5, y: 16.5))
        bezier2Path.addLine(to: CGPoint(x: 23.5, y: 16.5))
        bezier2Path.addLine(to: CGPoint(x: 27.5, y: 14.5))
        bezier2Path.addLine(to: CGPoint(x: 27.5, y: 18.5))
        bezier2Path.addLine(to: CGPoint(x: 23.5, y: 16.5))
        bezier2Path.addLine(to: CGPoint(x: 23.5, y: 16.5))
        main.setFill()
        bezier2Path.fill()
        main.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.lineJoinStyle = .round
        bezier2Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBandwidthSelected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 34, height: 34), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 34, height: 34), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 34, y: resizedFrame.height / 34)


        //// Color Declarations
        let backgroundColor = RamanStyleKit.backgroundColorSelected.withAlpha(0.1)
        let main = UIColor(red: 0.440, green: 0.720, blue: 0.880, alpha: 1.000)
        let signalColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let color2 = signalColor.shadow(withLevel: 0.6)

        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 34, height: 34), cornerRadius: 3)
        main.setFill()
        rectangle2Path.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 11, y: 7, width: 12, height: 20))
        color2.setFill()
        rectanglePath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 0.5, y: 16.5))
        bezierPath.addLine(to: CGPoint(x: 10.5, y: 16.5))
        bezierPath.addLine(to: CGPoint(x: 6.5, y: 14.5))
        bezierPath.addLine(to: CGPoint(x: 6.5, y: 18.5))
        bezierPath.addLine(to: CGPoint(x: 10.5, y: 16.5))
        bezierPath.addLine(to: CGPoint(x: 10.5, y: 16.5))
        RamanStyleKit.backgroundColorSelected.setFill()
        bezierPath.fill()
        RamanStyleKit.backgroundColorSelected.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 33.5, y: 16.5))
        bezier2Path.addLine(to: CGPoint(x: 23.5, y: 16.5))
        bezier2Path.addLine(to: CGPoint(x: 27.5, y: 14.5))
        bezier2Path.addLine(to: CGPoint(x: 27.5, y: 18.5))
        bezier2Path.addLine(to: CGPoint(x: 23.5, y: 16.5))
        bezier2Path.addLine(to: CGPoint(x: 23.5, y: 16.5))
        RamanStyleKit.backgroundColorSelected.setFill()
        bezier2Path.fill()
        RamanStyleKit.backgroundColorSelected.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.lineJoinStyle = .round
        bezier2Path.stroke()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 0.5, y: 0.5, width: 33, height: 33), cornerRadius: 3)
        backgroundColor.setFill()
        rectangle3Path.fill()
        color2.setStroke()
        rectangle3Path.lineWidth = 1
        rectangle3Path.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawAccesoryImage(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.5, y: 4.5))
        bezierPath.addLine(to: CGPoint(x: 20.5, y: 15.5))
        bezierPath.addLine(to: CGPoint(x: 10.5, y: 25.5))
        bezierPath.addLine(to: CGPoint(x: 10.5, y: 25.5))
        UIColor.black.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.lineCapStyle = .round
        bezierPath.lineJoinStyle = .round
        bezierPath.stroke()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfSpectro0: UIImage {
        if Cache.imageOfSpectro0 != nil {
            return Cache.imageOfSpectro0!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
            RamanStyleKit.drawSpectro0()

        Cache.imageOfSpectro0 = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfSpectro0!
    }

    @objc dynamic public class var imageOfSpectro1: UIImage {
        if Cache.imageOfSpectro1 != nil {
            return Cache.imageOfSpectro1!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
            RamanStyleKit.drawSpectro1()

        Cache.imageOfSpectro1 = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfSpectro1!
    }

    @objc dynamic public class var imageOfSpectro2: UIImage {
        if Cache.imageOfSpectro2 != nil {
            return Cache.imageOfSpectro2!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
            RamanStyleKit.drawSpectro2()

        Cache.imageOfSpectro2 = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfSpectro2!
    }

    @objc dynamic public class var imageOfSpectro3: UIImage {
        if Cache.imageOfSpectro3 != nil {
            return Cache.imageOfSpectro3!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
            RamanStyleKit.drawSpectro3()

        Cache.imageOfSpectro3 = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfSpectro3!
    }

    @objc dynamic public class var imageOfSpectro4: UIImage {
        if Cache.imageOfSpectro4 != nil {
            return Cache.imageOfSpectro4!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
            RamanStyleKit.drawSpectro4()

        Cache.imageOfSpectro4 = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfSpectro4!
    }

    @objc dynamic public class var imageOfBw0: UIImage {
        if Cache.imageOfBw0 != nil {
            return Cache.imageOfBw0!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
            RamanStyleKit.drawBw0()

        Cache.imageOfBw0 = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfBw0!
    }

    @objc dynamic public class var imageOfBw2: UIImage {
        if Cache.imageOfBw2 != nil {
            return Cache.imageOfBw2!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
            RamanStyleKit.drawBw2()

        Cache.imageOfBw2 = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfBw2!
    }

    @objc dynamic public class var imageOfBw1: UIImage {
        if Cache.imageOfBw1 != nil {
            return Cache.imageOfBw1!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
            RamanStyleKit.drawBw1()

        Cache.imageOfBw1 = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfBw1!
    }

    @objc dynamic public class var imageOfBw3: UIImage {
        if Cache.imageOfBw3 != nil {
            return Cache.imageOfBw3!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 60), false, 0)
            RamanStyleKit.drawBw3()

        Cache.imageOfBw3 = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return Cache.imageOfBw3!
    }

    @objc dynamic public class var imageOfSpectro: UIImage {
        if Cache.imageOfSpectro != nil {
            return Cache.imageOfSpectro!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 34, height: 34), false, 0)
            RamanStyleKit.drawSpectro()

        Cache.imageOfSpectro = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfSpectro!
    }

    @objc dynamic public class var imageOfSpectroSelected: UIImage {
        if Cache.imageOfSpectroSelected != nil {
            return Cache.imageOfSpectroSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 34, height: 34), false, 0)
            RamanStyleKit.drawSpectroSelected()

        Cache.imageOfSpectroSelected = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfSpectroSelected!
    }

    @objc dynamic public class var imageOfBandwidth: UIImage {
        if Cache.imageOfBandwidth != nil {
            return Cache.imageOfBandwidth!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 34, height: 34), false, 0)
            RamanStyleKit.drawBandwidth()

        Cache.imageOfBandwidth = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfBandwidth!
    }

    @objc dynamic public class var imageOfBandwidthSelected: UIImage {
        if Cache.imageOfBandwidthSelected != nil {
            return Cache.imageOfBandwidthSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 34, height: 34), false, 0)
            RamanStyleKit.drawBandwidthSelected()

        Cache.imageOfBandwidthSelected = UIGraphicsGetImageFromCurrentImageContext()!.withRenderingMode(.alwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfBandwidthSelected!
    }

    @objc dynamic public class var imageOfAccesoryImage: UIImage {
        if Cache.imageOfAccesoryImage != nil {
            return Cache.imageOfAccesoryImage!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            RamanStyleKit.drawAccesoryImage()

        Cache.imageOfAccesoryImage = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfAccesoryImage!
    }

    //// Customization Infrastructure

    @IBOutlet @objc dynamic var spectro0Targets: [AnyObject]! {
        get { return Cache.spectro0Targets }
        set {
            Cache.spectro0Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: RamanStyleKit.imageOfSpectro0)
            }
        }
    }

    @IBOutlet @objc dynamic var spectro1Targets: [AnyObject]! {
        get { return Cache.spectro1Targets }
        set {
            Cache.spectro1Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: RamanStyleKit.imageOfSpectro1)
            }
        }
    }

    @IBOutlet @objc dynamic var spectro2Targets: [AnyObject]! {
        get { return Cache.spectro2Targets }
        set {
            Cache.spectro2Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: RamanStyleKit.imageOfSpectro2)
            }
        }
    }

    @IBOutlet @objc dynamic var spectro3Targets: [AnyObject]! {
        get { return Cache.spectro3Targets }
        set {
            Cache.spectro3Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: RamanStyleKit.imageOfSpectro3)
            }
        }
    }

    @IBOutlet @objc dynamic var spectro4Targets: [AnyObject]! {
        get { return Cache.spectro4Targets }
        set {
            Cache.spectro4Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: RamanStyleKit.imageOfSpectro4)
            }
        }
    }

    @IBOutlet @objc dynamic var bw0Targets: [AnyObject]! {
        get { return Cache.bw0Targets }
        set {
            Cache.bw0Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: RamanStyleKit.imageOfBw0)
            }
        }
    }

    @IBOutlet @objc dynamic var bw2Targets: [AnyObject]! {
        get { return Cache.bw2Targets }
        set {
            Cache.bw2Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: RamanStyleKit.imageOfBw2)
            }
        }
    }

    @IBOutlet @objc dynamic var bw1Targets: [AnyObject]! {
        get { return Cache.bw1Targets }
        set {
            Cache.bw1Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: RamanStyleKit.imageOfBw1)
            }
        }
    }

    @IBOutlet @objc dynamic var bw3Targets: [AnyObject]! {
        get { return Cache.bw3Targets }
        set {
            Cache.bw3Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: RamanStyleKit.imageOfBw3)
            }
        }
    }

    @IBOutlet @objc dynamic var spectroTargets: [AnyObject]! {
        get { return Cache.spectroTargets }
        set {
            Cache.spectroTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: RamanStyleKit.imageOfSpectro)
            }
        }
    }

    @IBOutlet @objc dynamic var spectroSelectedTargets: [AnyObject]! {
        get { return Cache.spectroSelectedTargets }
        set {
            Cache.spectroSelectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setSelectedImage:"), with: RamanStyleKit.imageOfSpectroSelected)
            }
        }
    }

    @IBOutlet @objc dynamic var bandwidthTargets: [AnyObject]! {
        get { return Cache.bandwidthTargets }
        set {
            Cache.bandwidthTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: RamanStyleKit.imageOfBandwidth)
            }
        }
    }

    @IBOutlet @objc dynamic var bandwidthSelectedTargets: [AnyObject]! {
        get { return Cache.bandwidthSelectedTargets }
        set {
            Cache.bandwidthSelectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setSelectedImage:"), with: RamanStyleKit.imageOfBandwidthSelected)
            }
        }
    }

    @IBOutlet @objc dynamic var accesoryImageTargets: [AnyObject]! {
        get { return Cache.accesoryImageTargets }
        set {
            Cache.accesoryImageTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: RamanStyleKit.imageOfAccesoryImage)
            }
        }
    }




    @objc(RamanStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func withHue(_ newHue: CGFloat) -> UIColor {
        var saturation: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(nil, saturation: &saturation, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: newHue, saturation: saturation, brightness: brightness, alpha: alpha)
    }
    func withSaturation(_ newSaturation: CGFloat) -> UIColor {
        var hue: CGFloat = 1, brightness: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: nil, brightness: &brightness, alpha: &alpha)
        return UIColor(hue: hue, saturation: newSaturation, brightness: brightness, alpha: alpha)
    }
    func withBrightness(_ newBrightness: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, alpha: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: nil, alpha: &alpha)
        return UIColor(hue: hue, saturation: saturation, brightness: newBrightness, alpha: alpha)
    }
    func withAlpha(_ newAlpha: CGFloat) -> UIColor {
        var hue: CGFloat = 1, saturation: CGFloat = 1, brightness: CGFloat = 1
        self.getHue(&hue, saturation: &saturation, brightness: &brightness, alpha: nil)
        return UIColor(hue: hue, saturation: saturation, brightness: brightness, alpha: newAlpha)
    }
    func highlight(withLevel highlight: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-highlight) + highlight, green: green * (1-highlight) + highlight, blue: blue * (1-highlight) + highlight, alpha: alpha * (1-highlight) + highlight)
    }
    func shadow(withLevel shadow: CGFloat) -> UIColor {
        var red: CGFloat = 1, green: CGFloat = 1, blue: CGFloat = 1, alpha: CGFloat = 1
        self.getRed(&red, green: &green, blue: &blue, alpha: &alpha)
        return UIColor(red: red * (1-shadow), green: green * (1-shadow), blue: blue * (1-shadow), alpha: alpha * (1-shadow) + shadow)
    }
}
